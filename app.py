import streamlit as st
import pandas as pd
import numpy as np
from tensorflow.keras.models import load_model
from sklearn.preprocessing import StandardScaler

# Load dataset and model
dataset_path = "REJAFADA_updated.csv"
model_path = "malware_detection_model.h5"

# Load the dataset
df = pd.read_csv(dataset_path)

# Load the trained model
model = load_model(model_path)

# Create a StandardScaler (it should be the same scaler used during training)
scaler = StandardScaler()

# Fit the scaler on the entire dataset (same way it was done during training)
X = df[[f'a{i}' for i in range(1, 6825)]].values
scaler.fit(X)

# Streamlit app customization
st.set_page_config(page_title="Jar Malware Detection App", layout="centered")

# Sidebar for user input
st.sidebar.header("Input Features")
st.sidebar.write("Select a sample from the dataset:")

# Dropdown for sample selection
selected_sample = st.sidebar.selectbox("Choose a sample:", df.index)

# Display app title and description
st.title("Jar Malware Detection")
st.write("""
### Detect Jar Malware Based on File Features
This tool allows you to detect whether a Jar file contains malware based on its features.
Select a sample input from the sidebar and click the "Predict" button to get the result.
""")

# Display selected sample's features (a1 to a6824) horizontally
selected_features = df.loc[selected_sample, [f'a{i}' for i in range(1, 6825)]]
st.write("### Selected Features : ")
selected_features_df = pd.DataFrame([selected_features.values], columns=selected_features.index)
st.dataframe(selected_features_df)
# Convert the features into a numpy array and ensure correct data type
input_data = np.array([selected_features], dtype=np.float32)

# Apply the same scaling as done during training
input_data_scaled = scaler.transform(input_data)

# Button to predict
if st.button("Predict"):
    prediction = model.predict(input_data_scaled)
    
    # Display the result with color-coded output
    st.write("### Prediction Result")
    if prediction[0][0] > 0.5:
        st.error("ğŸ”´ Jar malware detected.")
    else:
        st.success("ğŸŸ¢ This is a benign jar file.")

# Reset button to reload the app
if st.sidebar.button("Reset"):
    st.experimental_rerun()


